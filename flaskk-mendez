{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyNH+rUAy32MD8OJ2wP3Ba7s"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","source":["!pip install Flask-Cors\n","!pip install flask_ngrok\n","!pip install pyngrok"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"stefCy7iwTle","executionInfo":{"status":"ok","timestamp":1690297278651,"user_tz":180,"elapsed":14768,"user":{"displayName":"Ramiro Mendez","userId":"06458901084933245696"}},"outputId":"7be46f1d-c600-4ff2-e598-647bd7832c63"},"execution_count":35,"outputs":[{"output_type":"stream","name":"stdout","text":["Requirement already satisfied: Flask-Cors in /usr/local/lib/python3.10/dist-packages (4.0.0)\n","Requirement already satisfied: Flask>=0.9 in /usr/local/lib/python3.10/dist-packages (from Flask-Cors) (2.2.5)\n","Requirement already satisfied: Werkzeug>=2.2.2 in /usr/local/lib/python3.10/dist-packages (from Flask>=0.9->Flask-Cors) (2.3.6)\n","Requirement already satisfied: Jinja2>=3.0 in /usr/local/lib/python3.10/dist-packages (from Flask>=0.9->Flask-Cors) (3.1.2)\n","Requirement already satisfied: itsdangerous>=2.0 in /usr/local/lib/python3.10/dist-packages (from Flask>=0.9->Flask-Cors) (2.1.2)\n","Requirement already satisfied: click>=8.0 in /usr/local/lib/python3.10/dist-packages (from Flask>=0.9->Flask-Cors) (8.1.6)\n","Requirement already satisfied: MarkupSafe>=2.0 in /usr/local/lib/python3.10/dist-packages (from Jinja2>=3.0->Flask>=0.9->Flask-Cors) (2.1.3)\n","Requirement already satisfied: flask_ngrok in /usr/local/lib/python3.10/dist-packages (0.0.25)\n","Requirement already satisfied: Flask>=0.8 in /usr/local/lib/python3.10/dist-packages (from flask_ngrok) (2.2.5)\n","Requirement already satisfied: requests in /usr/local/lib/python3.10/dist-packages (from flask_ngrok) (2.27.1)\n","Requirement already satisfied: Werkzeug>=2.2.2 in /usr/local/lib/python3.10/dist-packages (from Flask>=0.8->flask_ngrok) (2.3.6)\n","Requirement already satisfied: Jinja2>=3.0 in /usr/local/lib/python3.10/dist-packages (from Flask>=0.8->flask_ngrok) (3.1.2)\n","Requirement already satisfied: itsdangerous>=2.0 in /usr/local/lib/python3.10/dist-packages (from Flask>=0.8->flask_ngrok) (2.1.2)\n","Requirement already satisfied: click>=8.0 in /usr/local/lib/python3.10/dist-packages (from Flask>=0.8->flask_ngrok) (8.1.6)\n","Requirement already satisfied: urllib3<1.27,>=1.21.1 in /usr/local/lib/python3.10/dist-packages (from requests->flask_ngrok) (1.26.16)\n","Requirement already satisfied: certifi>=2017.4.17 in /usr/local/lib/python3.10/dist-packages (from requests->flask_ngrok) (2023.5.7)\n","Requirement already satisfied: charset-normalizer~=2.0.0 in /usr/local/lib/python3.10/dist-packages (from requests->flask_ngrok) (2.0.12)\n","Requirement already satisfied: idna<4,>=2.5 in /usr/local/lib/python3.10/dist-packages (from requests->flask_ngrok) (3.4)\n","Requirement already satisfied: MarkupSafe>=2.0 in /usr/local/lib/python3.10/dist-packages (from Jinja2>=3.0->Flask>=0.8->flask_ngrok) (2.1.3)\n","Requirement already satisfied: pyngrok in /usr/local/lib/python3.10/dist-packages (6.0.0)\n","Requirement already satisfied: PyYAML in /usr/local/lib/python3.10/dist-packages (from pyngrok) (6.0.1)\n"]}]},{"cell_type":"code","execution_count":36,"metadata":{"id":"Bs_TtcSHsKDV","executionInfo":{"status":"ok","timestamp":1690297278653,"user_tz":180,"elapsed":25,"user":{"displayName":"Ramiro Mendez","userId":"06458901084933245696"}}},"outputs":[],"source":["def insert_mediciones(mediciones):\n","    try:\n","        conn = connect_to_db()\n","        cur = conn.cursor()\n","        cur.execute(\"INSERT INTO mediciones (humedad, temperatura) VALUES (?, ?)\", (mediciones['humedad'], mediciones['temperatura']))\n","        conn.commit()\n","    except:\n","        conn.rollback()\n","    finally:\n","        conn.close()\n","\n","def insert_User(user):\n","    inserted_user = {}\n","    try:\n","        conn = connect_to_db()\n","        cur = conn.cursor()\n","        cur.execute(\"INSERT INTO users (name, email, phone, address, country) VALUES (?, ?, ?, ?, ?)\", (user['name'], user['email'], user['phone'], user['address'], user['country']))\n","        conn.commit()\n","        inserted_user = get_user_by_id(cur.lastrowid)\n","    except:\n","        conn.rollback()\n","    finally:\n","        conn.close()\n","    return inserted_user"]},{"cell_type":"code","source":["def get_mediciones():\n","    mediciones=[]\n","    try:\n","      conn = connect_to_db()\n","      conn.row_factory = sqlite3.Row\n","      cur = conn.cursori()\n","      cur.execute(\"SELECT FROM mediciones\")\n","      rows = cur.fetchall()\n","\n","      #convert row objects to dictionary\n","      for i in rows:\n","        medi = {}\n","        medi[\"humedad\"] = i[\"humedad\"]\n","        medi[\"temperatura\"] = i[\"temperatura\"]\n","        medi[\"tiempo\"]= i[\"tiempo\"]\n","        mediciones.append(medi)\n","    except:\n","          print(\"error en la lectura de mediciones\")\n","          mediciones = []\n","          return mediciones\n","          def get_users():\n","            users = []\n","    try:\n","              conn = connect_to_db()\n","              conn.row_factory = sqlite3.Row\n","              cur = conn.cursor()\n","              cur.execute(\"SELECT * FROM users\")\n","              rows = cur.fetchall()\n","\n","              for row in rows:\n","                user = {}\n","                user[\"name\"] = row[\"name\"]\n","                user[\"email\"] = row[\"email\"]\n","                user[\"phone\"] = row[\"phone\"]\n","                user[\"address\"] = row[\"address\"]\n","                user[\"country\"] = row[\"country\"]\n","                users.append(user)\n","    except:\n","                  print(\"Error en la lectura de usuarios\")\n","                  users = []\n","    finally:\n","                 conn.close()\n","    return users\n","    def get_user_by_id(user_id):\n","        user = {}\n","        try:\n","          conn = connect_to_db()\n","          conn.row_factory = sqlite3.Row\n","          cur = conn.cursor()\n","          cur.execute(\"SELECT * FROM users WHERE user_id = ?\",\n","                      (user_id))\n","          row = cur-fetchone()\n","          # convert row object to dictionary\n","          user[\"user_id\"] = row[\"user_id\"]\n","          user[\"name\"] = row[\"name\"]\n","          user[\"email\"] = row[\"email\"]\n","          user[\"phone\"] = row[\"phone\"]\n","          user[\"address\"] = row[\"address\"]\n","          user[\"country\"] = row[\"country\"]\n","\n","        except:\n","          user = {}\n","          return user\n","\n","\n","\n","\n","\n","\n","\n","\n","\n","\n"],"metadata":{"id":"DHiVn8Rrx3s6","executionInfo":{"status":"ok","timestamp":1690297278653,"user_tz":180,"elapsed":24,"user":{"displayName":"Ramiro Mendez","userId":"06458901084933245696"}}},"execution_count":37,"outputs":[]},{"cell_type":"code","source":["import sqlite3\n","\n","def connect_to_db():\n","    conn = sqlite3.connect(\"database.db\")\n","    return conn\n","\n","def create_db_table():\n","    conn = None\n","    try:\n","        conn = connect_to_db()\n","        conn.execute('''\n","            CREATE TABLE IF NOT EXISTS users (\n","              user_id INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL,\n","              name TEXT NOT NULL,\n","              email TEXT NOT NULL,\n","              phone TEXT NOT NULL,\n","              address TEXT NOT NULL,\n","              country TEXT NOT NULL\n","              );\n","          ''')\n","        conn.commit()\n","        print(\"User table created successfully\")\n","    except sqlite3.Error as e:\n","        print(e)\n","        print(\"User table creation failed\")\n","\n","    try:\n","        conn.execute('''\n","            CREATE TABLE IF NOT EXISTS mediciones (\n","              mediciones_id INTEGER PRIMARY KEY AUTOINCREMENT,\n","              temperatura TEXT NOT NULL,\n","              humedad TEXT NOT NULL,\n","              tiempo TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL\n","            );\n","          ''')\n","        conn.commit()\n","        print(\"Mediciones table created successfully\")\n","    except sqlite3.Error as e:\n","        print(e)\n","        print(\"Mediciones table creation failed\")\n","\n","    finally:\n","        if conn:\n","            conn.close()\n","\n","conn = connect_to_db()\n","create_db_table()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"ywWyT8ONxCbI","executionInfo":{"status":"ok","timestamp":1690297278654,"user_tz":180,"elapsed":23,"user":{"displayName":"Ramiro Mendez","userId":"06458901084933245696"}},"outputId":"1e320cf1-d49d-4fff-8b82-9a77f0ab360b"},"execution_count":38,"outputs":[{"output_type":"stream","name":"stdout","text":["User table created successfully\n","Mediciones table created successfully\n"]}]},{"cell_type":"code","source":["def update_user(user):\n","  updated_user = {}\n","  try:\n","    conn =connect_to_db()\n","    cur = conn.cursor()\n","    cur.execute(\"UPDATE users SET name = ?, email = ?, phone = ?, address = ?, country = ? WHERE user_id =?\",\n","                (user[\"name\"], user[\"email\"], user[\"phone\"],\n","                 user[\"address\"], user[\"country\"],\n","                 user[\"user_id\"],))\n","    conn.commit()\n","    #return the user\n","    updated_user = get_user_by_id(user[\"user_id\"])\n","  except:\n","    conn.rollblack()\n","    updated_user = {}\n","  finally:\n","    conn.close()\n","    return updated_user\n","\n","\n"],"metadata":{"id":"1Kiwd3k04Yz3","executionInfo":{"status":"ok","timestamp":1690297278654,"user_tz":180,"elapsed":16,"user":{"displayName":"Ramiro Mendez","userId":"06458901084933245696"}}},"execution_count":39,"outputs":[]},{"cell_type":"code","source":["def delete_user(user_id):\n","    message = {}\n","    try:\n","      conn = connect_to_db()\n","      conn.execute(\"DELETE from users WHERE user_id = ?\",(user_id,))\n","      conn.commit()\n","      message[\"status\"] = \"User deleted successfully\"\n","    except:\n","      conn.rollblack()\n","      message[\"status\"] = \"Cannot delete user\"\n","    finally:\n","      conn.close()\n","    return message\n"],"metadata":{"id":"SVCKE9Sj8ryI","executionInfo":{"status":"ok","timestamp":1690297278655,"user_tz":180,"elapsed":16,"user":{"displayName":"Ramiro Mendez","userId":"06458901084933245696"}}},"execution_count":40,"outputs":[]},{"cell_type":"code","source":["from flask import Flask, request, jsonify #added to top of file\n","from flask_cors import CORS #added to top of file\n","from flask_ngrok import run_with_ngrok\n","\n","app = Flask(__name__)\n","run_with_ngrok(app)\n","\n","CORS(app, resources={r\"/*\": {\"origins\": \"*\"}})\n","\n","@app.route(\"/usuarios\", methods=[\"GET\"])\n","def api_get_users():\n","    return jsonify(get_users())\n","\n","@app.route(\"/mediciones\", methods=[\"GET\"])\n","def api_medi():\n","    return jsonify(get_mediciones())\n","\n","@app.route(\"/mediciones/add\", methods = [\"POST\"])\n","def api_add_mediciones():\n","    medi = request.get_json()\n","    print(medi)\n","    return jsonify(insert_mediciones(medi))\n","\n","@app.route(\"/users/<user_id>\",methods=[\"GET\"])\n","def api_get_user(user_id):\n","    return jsonify(get_user_by_id(user_id))\n","\n","@app.route(\"/users/add\", methods = [\"POST\"])\n","def api_add_user():\n","    user = request.get_json()\n","    return jsonify(insert_user(user))\n","\n","@app.route(\"/users/update\", methods = [\"PUT\"])\n","def api_update_user():\n","    user = request.get_json()\n","    return jsonify(update_user(user))\n","\n","@app.route(\"/users/delete/<user_id>\", methods = [\"DELETE\"])\n","def api_delete_user(user_id):\n","    return jsonify(delete_user(user_id))\n","\n","if __name__ == \"__main__\":\n","  #app.debug = True\n","\n","  app.run() #run app\n","\n","\n","\n","\n","\n","\n"],"metadata":{"id":"RI534-C5-xcw","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1690297263896,"user_tz":180,"elapsed":195417,"user":{"displayName":"Ramiro Mendez","userId":"06458901084933245696"}},"outputId":"97dfb75b-8220-4b8d-e856-84737e9e22cf"},"execution_count":34,"outputs":[{"output_type":"stream","name":"stdout","text":[" * Serving Flask app '__main__'\n"," * Debug mode: off\n"]},{"output_type":"stream","name":"stderr","text":["INFO:werkzeug:\u001b[31m\u001b[1mWARNING: This is a development server. Do not use it in a production deployment. Use a production WSGI server instead.\u001b[0m\n"," * Running on http://127.0.0.1:5000\n","INFO:werkzeug:\u001b[33mPress CTRL+C to quit\u001b[0m\n"]},{"output_type":"stream","name":"stdout","text":[" * Running on http://1e97-35-221-55-223.ngrok.io\n"," * Traffic stats available on http://127.0.0.1:4040\n"]}]},{"cell_type":"markdown","source":[],"metadata":{"id":"aLZKhvBq6IhH"}}]}